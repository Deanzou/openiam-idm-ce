use openiam;


DELIMITER $$

DROP PROCEDURE IF EXISTS MIGRATE_COORELATED_NAME$$

CREATE PROCEDURE MIGRATE_COORELATED_NAME() 
	BEGIN
		DECLARE done INT DEFAULT FALSE;
		DECLARE theId VARCHAR(32);
		DECLARE theName VARCHAR(250);
		DECLARE cur1 CURSOR FOR (SELECT RESOURCE_ID, NAME FROM AUTH_PROVIDER WHERE RESOURCE_ID IS NOT NULL);
		DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
		OPEN cur1;
		
		REPEAT 
			FETCH cur1 INTO theId, theName;
			IF (theId IS NOT NULL AND theName IS NOT NULL) THEN
				UPDATE RES SET COORELATED_NAME=theName WHERE RESOURCE_ID=theId;
			END IF;
		UNTIL done END REPEAT; 
		
		CLOSE cur1;
	END$$

call MIGRATE_COORELATED_NAME()$$


DROP PROCEDURE IF EXISTS MIGRATE_COORELATED_NAME$$

CREATE PROCEDURE MIGRATE_COORELATED_NAME() 
	BEGIN
		DECLARE done INT DEFAULT FALSE;
		DECLARE theId VARCHAR(32);
		DECLARE theName VARCHAR(250);
		DECLARE cur1 CURSOR FOR (SELECT ADMIN_RESOURCE_ID, COMPANY_NAME FROM COMPANY WHERE ADMIN_RESOURCE_ID IS NOT NULL);
		DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
		OPEN cur1;
		
		REPEAT 
			FETCH cur1 INTO theId, theName;
			IF (theId IS NOT NULL AND theName IS NOT NULL) THEN
				UPDATE RES SET COORELATED_NAME=theName WHERE RESOURCE_ID=theId;
			END IF;
		UNTIL done END REPEAT; 
		
		CLOSE cur1;
	END$$
	
call MIGRATE_COORELATED_NAME()$$

DROP PROCEDURE IF EXISTS MIGRATE_COORELATED_NAME$$

CREATE PROCEDURE MIGRATE_COORELATED_NAME() 
	BEGIN
		DECLARE done INT DEFAULT FALSE;
		DECLARE theId VARCHAR(32);
		DECLARE theName VARCHAR(250);
		DECLARE cur1 CURSOR FOR (SELECT RESOURCE_ID, CONTENT_PROVIDER_NAME FROM CONTENT_PROVIDER WHERE RESOURCE_ID IS NOT NULL);
		DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
		OPEN cur1;
		
		REPEAT 
			FETCH cur1 INTO theId, theName;
			IF (theId IS NOT NULL AND theName IS NOT NULL) THEN
				UPDATE RES SET COORELATED_NAME=theName WHERE RESOURCE_ID=theId;
			END IF;
		UNTIL done END REPEAT; 
		
		CLOSE cur1;
	END$$
	
call MIGRATE_COORELATED_NAME()$$

DROP PROCEDURE IF EXISTS MIGRATE_COORELATED_NAME$$

CREATE PROCEDURE MIGRATE_COORELATED_NAME() 
	BEGIN
		DECLARE done INT DEFAULT FALSE;
		DECLARE theId VARCHAR(32);
		DECLARE theName VARCHAR(250);
		DECLARE cur1 CURSOR FOR (SELECT ADMIN_RESOURCE_ID, GRP_NAME FROM GRP WHERE ADMIN_RESOURCE_ID IS NOT NULL);
		DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
		OPEN cur1;
		
		REPEAT 
			FETCH cur1 INTO theId, theName;
			IF (theId IS NOT NULL AND theName IS NOT NULL) THEN
				UPDATE RES SET COORELATED_NAME=theName WHERE RESOURCE_ID=theId;
			END IF;
		UNTIL done END REPEAT; 
		
		CLOSE cur1;
	END$$
	
call MIGRATE_COORELATED_NAME()$$

DROP PROCEDURE IF EXISTS MIGRATE_COORELATED_NAME$$

CREATE PROCEDURE MIGRATE_COORELATED_NAME() 
	BEGIN
		DECLARE done INT DEFAULT FALSE;
		DECLARE theId VARCHAR(32);
		DECLARE theName VARCHAR(250);
		DECLARE cur1 CURSOR FOR (SELECT RESOURCE_ID, ATTRIBUTE_NAME FROM METADATA_ELEMENT WHERE RESOURCE_ID IS NOT NULL);
		DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
		OPEN cur1;
		
		REPEAT 
			FETCH cur1 INTO theId, theName;
			IF (theId IS NOT NULL AND theName IS NOT NULL) THEN
				UPDATE RES SET COORELATED_NAME=theName WHERE RESOURCE_ID=theId;
			END IF;
		UNTIL done END REPEAT; 
		
		CLOSE cur1;
	END$$
	
call MIGRATE_COORELATED_NAME()$$

DROP PROCEDURE IF EXISTS MIGRATE_COORELATED_NAME$$

CREATE PROCEDURE MIGRATE_COORELATED_NAME() 
	BEGIN
		DECLARE done INT DEFAULT FALSE;
		DECLARE theId VARCHAR(32);
		DECLARE theName VARCHAR(250);
		DECLARE cur1 CURSOR FOR (SELECT RESOURCE_ID, NAME FROM METADATA_ELEMENT_PAGE_TEMPLATE WHERE RESOURCE_ID IS NOT NULL);
		DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
		OPEN cur1;
		
		REPEAT 
			FETCH cur1 INTO theId, theName;
			IF (theId IS NOT NULL AND theName IS NOT NULL) THEN
				UPDATE RES SET COORELATED_NAME=theName WHERE RESOURCE_ID=theId;
			END IF;
		UNTIL done END REPEAT; 
		
		CLOSE cur1;
	END$$
	
call MIGRATE_COORELATED_NAME()$$

DROP PROCEDURE IF EXISTS MIGRATE_COORELATED_NAME$$

CREATE PROCEDURE MIGRATE_COORELATED_NAME() 
	BEGIN
		DECLARE done INT DEFAULT FALSE;
		DECLARE theId VARCHAR(32);
		DECLARE theName VARCHAR(250);
		DECLARE cur1 CURSOR FOR (SELECT ADMIN_RESOURCE_ID, ROLE_NAME FROM ROLE WHERE ADMIN_RESOURCE_ID IS NOT NULL);
		DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
		OPEN cur1;
		
		REPEAT 
			FETCH cur1 INTO theId, theName;
			IF (theId IS NOT NULL AND theName IS NOT NULL) THEN
				UPDATE RES SET COORELATED_NAME=theName WHERE RESOURCE_ID=theId;
			END IF;
		UNTIL done END REPEAT; 
		
		CLOSE cur1;
	END$$
	
call MIGRATE_COORELATED_NAME()$$

DROP PROCEDURE IF EXISTS MIGRATE_COORELATED_NAME$$

CREATE PROCEDURE MIGRATE_COORELATED_NAME() 
	BEGIN
		DECLARE done INT DEFAULT FALSE;
		DECLARE theId VARCHAR(32);
		DECLARE theName VARCHAR(250);
		DECLARE cur1 CURSOR FOR (SELECT RESOURCE_ID, PATTERN FROM URI_PATTERN WHERE RESOURCE_ID IS NOT NULL);
		DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
		OPEN cur1;
		
		REPEAT 
			FETCH cur1 INTO theId, theName;
			IF (theId IS NOT NULL AND theName IS NOT NULL) THEN
				UPDATE RES SET COORELATED_NAME=theName WHERE RESOURCE_ID=theId;
			END IF;
		UNTIL done END REPEAT; 
		
		CLOSE cur1;
	END$$
	
call MIGRATE_COORELATED_NAME()$$


DELIMITER ;

DROP PROCEDURE MIGRATE_COORELATED_NAME;

COMMIT;