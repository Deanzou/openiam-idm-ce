use openiam;

DELIMITER $$

DROP PROCEDURE IF EXISTS REMOVE_UNUSED_COLUMNS$$

CREATE PROCEDURE REMOVE_UNUSED_COLUMNS()
	BEGIN
		IF EXISTS (SELECT * FROM information_schema.columns WHERE table_schema='openiam' AND table_name = 'AUTH_LEVEL' AND column_name = 'AUTH_LEVEL_DIG') THEN
			ALTER TABLE AUTH_LEVEL DROP COLUMN AUTH_LEVEL_DIG;
 		END IF;
 		
 		IF EXISTS (SELECT * FROM information_schema.columns WHERE table_schema='openiam' AND table_name = 'AUTH_LEVEL' AND column_name = 'REQUIRES_AUTHENTICATION') THEN
			ALTER TABLE AUTH_LEVEL DROP COLUMN REQUIRES_AUTHENTICATION;
 		END IF;
 		
 		IF EXISTS (SELECT * FROM information_schema.columns WHERE table_schema='openiam' AND table_name = 'AUTH_LEVEL_GROUPING') THEN
			DELETE FROM AUTH_LEVEL_GROUPING;
 		END IF;
	END$$
DELIMITER ;

call REMOVE_UNUSED_COLUMNS();
DROP PROCEDURE REMOVE_UNUSED_COLUMNS;

ALTER TABLE AUTH_LEVEL ADD COLUMN REQUIRES_AUTHENTICATION CHAR(1) DEFAULT 'Y';
UPDATE AUTH_LEVEL SET REQUIRES_AUTHENTICATION='Y';
ALTER TABLE AUTH_LEVEL CHANGE REQUIRES_AUTHENTICATION REQUIRES_AUTHENTICATION CHAR(1) NOT NULL DEFAULT 'Y';

DELETE FROM AUTH_LEVEL WHERE AUTH_LEVEL_ID IN('None', 'NONE');
INSERT INTO AUTH_LEVEL (AUTH_LEVEL_ID, AUTH_LEVEL_NAME, REQUIRES_AUTHENTICATION) VALUES('NONE', 'No Authentication Required', 'N');

DROP TABLE IF EXISTS CP_AUTH_LEVEL_GRP_XREF;
DROP TABLE IF EXISTS URI_AUTH_LEVEL_GRP_XREF;
DROP TABLE IF EXISTS AUTH_LEVEL_ATTRIBUTE;
DROP TABLE IF EXISTS AUTH_LEVEL_GROUPING;

CREATE TABLE AUTH_LEVEL_GROUPING (
	AUTH_LEVEL_GROUPING_ID VARCHAR(32) NOT NULL,
	AUTH_LEVEL_ID VARCHAR(32) NOT NULL,
	NAME VARCHAR(100) NOT NULL,
	PRIMARY KEY(AUTH_LEVEL_GROUPING_ID),
	CONSTRAINT AUTH_LEVEL_GROUPING_FK FOREIGN KEY (AUTH_LEVEL_ID) REFERENCES AUTH_LEVEL(AUTH_LEVEL_ID)
)ENGINE=InnoDB;

CREATE TABLE AUTH_LEVEL_ATTRIBUTE(
	AUTH_LEVEL_ATTRIBUTE_ID VARCHAR(32) NOT NULL,
	AUTH_LEVEL_GROUPING_ID VARCHAR(32) NOT NULL,
	TYPE_ID VARCHAR(32) NOT NULL,
	NAME VARCHAR(100) NOT NULL,
	VALUE BLOB NOT NULL,
	PRIMARY KEY(AUTH_LEVEL_ATTRIBUTE_ID),
	CONSTRAINT AUTH_LEVEL_ATTR_GRP_FK FOREIGN KEY (AUTH_LEVEL_GROUPING_ID) REFERENCES AUTH_LEVEL_GROUPING(AUTH_LEVEL_GROUPING_ID),
	CONSTRAINT AUTH_LEVEL_ATTR_TYPE_FK FOREIGN KEY (TYPE_ID) REFERENCES METADATA_TYPE(TYPE_ID)
)ENGINE=InnoDB;

CREATE TABLE URI_AUTH_LEVEL_GRP_XREF(
	URI_PATTERN_ID VARCHAR(32) NOT NULL,
	AUTH_LEVEL_GROUPING_ID VARCHAR(32) NOT NULL,
	EXEC_ORDER INT(3) NOT NULL,
	CONSTRAINT URI_AUTH_LEVEL_GRP_FK FOREIGN KEY (AUTH_LEVEL_GROUPING_ID) REFERENCES AUTH_LEVEL_GROUPING(AUTH_LEVEL_GROUPING_ID),
	CONSTRAINT URI_AUTH_LEVEL_URI_FK FOREIGN KEY (URI_PATTERN_ID) REFERENCES URI_PATTERN(URI_PATTERN_ID),
	CONSTRAINT UNIQUE_URI_AUTH_GROUP UNIQUE(URI_PATTERN_ID, AUTH_LEVEL_GROUPING_ID, EXEC_ORDER)
)ENGINE=InnoDB;

CREATE TABLE CP_AUTH_LEVEL_GRP_XREF(
	CONTENT_PROVIDER_ID VARCHAR(32) NOT NULL,
	AUTH_LEVEL_GROUPING_ID VARCHAR(32) NOT NULL,
	EXEC_ORDER INT(3) NOT NULL,
	CONSTRAINT CP_AUTH_LEVEL_GRP_FK FOREIGN KEY (AUTH_LEVEL_GROUPING_ID) REFERENCES AUTH_LEVEL_GROUPING(AUTH_LEVEL_GROUPING_ID),
	CONSTRAINT CP_AUTH_LEVEL_CP_FK FOREIGN KEY (CONTENT_PROVIDER_ID) REFERENCES CONTENT_PROVIDER(CONTENT_PROVIDER_ID),
	CONSTRAINT UNIQUE_CP_AUTH_GROUP UNIQUE(CONTENT_PROVIDER_ID, AUTH_LEVEL_GROUPING_ID, EXEC_ORDER)
)ENGINE=InnoDB;

INSERT INTO AUTH_LEVEL_GROUPING (AUTH_LEVEL_GROUPING_ID, AUTH_LEVEL_ID, NAME) VALUES('NONE', 'NONE', 'None');
INSERT INTO AUTH_LEVEL_GROUPING (AUTH_LEVEL_GROUPING_ID, AUTH_LEVEL_ID, NAME) VALUES('PASSWORD_AUTH', 'PASSWORD_AUTH', 'Password Authentication');
INSERT INTO AUTH_LEVEL_GROUPING (AUTH_LEVEL_GROUPING_ID, AUTH_LEVEL_ID, NAME) VALUES('CERT_AUTH', 'CERT_AUTH', 'Certificate Authentication');