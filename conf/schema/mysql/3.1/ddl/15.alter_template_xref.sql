use openiam;

DELIMITER $$

DROP PROCEDURE IF EXISTS MODIFY_TEMPLATE_XREF$$

CREATE PROCEDURE MODIFY_TEMPLATE_XREF()
	BEGIN
		DECLARE done INT DEFAULT FALSE;
		IF EXISTS (SELECT * FROM information_schema.columns WHERE table_schema='openiam' AND table_name = 'UI_FIELD_TEMPLATE_XREF' AND column_name = 'XREF_ID') THEN
			ALTER TABLE UI_FIELD_TEMPLATE_XREF DROP COLUMN XREF_ID;
 		END IF;
	END$$
DELIMITER ;

call MODIFY_TEMPLATE_XREF();
DROP PROCEDURE MODIFY_TEMPLATE_XREF;

ALTER TABLE UI_FIELD_TEMPLATE_XREF ADD COLUMN XREF_ID VARCHAR(32) NULL;

DELIMITER $$

DROP PROCEDURE IF EXISTS MODIFY_TEMPLATE_XREF$$

CREATE PROCEDURE MODIFY_TEMPLATE_XREF()
	BEGIN
		DECLARE done INT DEFAULT FALSE;
		DECLARE xrefId INT DEFAULT 1;
		DECLARE fieldId VARCHAR(32);
		DECLARE templateId VARCHAR(32);
		DECLARE cur1 CURSOR FOR (SELECT UI_FIELD_ID, TEMPLATE_ID FROM UI_FIELD_TEMPLATE_XREF);
		DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
		OPEN cur1;
		
		REPEAT 
			FETCH cur1 INTO fieldId, templateId;
			IF (fieldId IS NOT NULL) THEN
				IF (templateId IS NOT NULL) THEN
					IF ((SELECT count(*) FROM UI_FIELD_TEMPLATE_XREF WHERE UI_FIELD_ID=fieldId AND TEMPLATE_ID=templateId AND XREF_ID IS NULL)=1) THEN
						UPDATE UI_FIELD_TEMPLATE_XREF SET XREF_ID=xrefId WHERE UI_FIELD_ID=fieldId AND TEMPLATE_ID=templateId;
						SET xrefId := xrefId + 1;
					END IF;
				END IF;
			END IF;
		UNTIL done END REPEAT;
		CLOSE cur1;
	END$$
DELIMITER ;

call MODIFY_TEMPLATE_XREF();
DROP PROCEDURE MODIFY_TEMPLATE_XREF;

ALTER TABLE UI_FIELD_TEMPLATE_XREF CHANGE XREF_ID XREF_ID VARCHAR(32) NOT NULL;

ALTER TABLE UI_FIELD_TEMPLATE_XREF ADD PRIMARY KEY(XREF_ID);