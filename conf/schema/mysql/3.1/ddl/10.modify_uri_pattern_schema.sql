use openiam;

DELETE FROM URI_AUTH_LEVEL_GRP_XREF;
DELETE FROM CP_AUTH_LEVEL_GRP_XREF;


DELIMITER $$

DROP PROCEDURE IF EXISTS MIGRATE_PATTERNS$$

CREATE PROCEDURE MIGRATE_PATTERNS()
	BEGIN
		DECLARE done INT DEFAULT FALSE;
		DECLARE authLevelId VARCHAR(32);
		DECLARE entityId VARCHAR(32);
		DECLARE cur1 CURSOR FOR (SELECT URI_PATTERN_ID, MIN_AUTH_LEVEL FROM URI_PATTERN);
		DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
		OPEN cur1;
			
		REPEAT 
			FETCH cur1 INTO entityId, authLevelId;
			IF (entityId IS NOT NULL) THEN
				IF (authLevelId IS NOT NULL) THEN
					IF ((SELECT count(*) FROM URI_AUTH_LEVEL_GRP_XREF WHERE URI_PATTERN_ID=entityId AND AUTH_LEVEL_GROUPING_ID=authLevelId)= 0) THEN
						INSERT INTO URI_AUTH_LEVEL_GRP_XREF (URI_PATTERN_ID, AUTH_LEVEL_GROUPING_ID, EXEC_ORDER) VALUES(entityId, authLevelId, 0);
					END IF;
				END IF;
			END IF;
		UNTIL done END REPEAT;
		CLOSE cur1;
	END$$
DELIMITER ;

call MIGRATE_PATTERNS();
DROP PROCEDURE MIGRATE_PATTERNS;

DELIMITER $$

DROP PROCEDURE IF EXISTS MIGRATE_PATTERNS$$

CREATE PROCEDURE MIGRATE_PATTERNS()
	BEGIN
	    DECLARE done INT DEFAULT FALSE;
		DECLARE authLevelId VARCHAR(32);
		DECLARE entityId VARCHAR(32);
		DECLARE cur1 CURSOR FOR (SELECT CONTENT_PROVIDER_ID, MIN_AUTH_LEVEL FROM CONTENT_PROVIDER);
		DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
		OPEN cur1;
		
		REPEAT
			FETCH cur1 INTO entityId, authLevelId;
			IF (entityId IS NOT NULL) THEN
				IF (authLevelId IS NOT NULL) THEN
					IF ((SELECT count(*) FROM CP_AUTH_LEVEL_GRP_XREF WHERE CONTENT_PROVIDER_ID=entityId AND AUTH_LEVEL_GROUPING_ID=authLevelId)= 0) THEN
						INSERT INTO CP_AUTH_LEVEL_GRP_XREF (CONTENT_PROVIDER_ID, AUTH_LEVEL_GROUPING_ID, EXEC_ORDER) VALUES(entityId, authLevelId, 0);
					END IF;
				END IF;
			END IF;
		UNTIL done END REPEAT; 
		CLOSE cur1;
	END$$
DELIMITER ;

call MIGRATE_PATTERNS();
DROP PROCEDURE MIGRATE_PATTERNS;