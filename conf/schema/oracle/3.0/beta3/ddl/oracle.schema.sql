/* 1 */
ALTER TABLE ATTRIBUTE_MAP ADD (SYNCH_CONFIG_ID VARCHAR2(32) NULL);
ALTER TABLE ATTRIBUTE_MAP MODIFY (MANAGED_SYS_ID VARCHAR2(32) DEFAULT NULL);
ALTER TABLE SYNCH_CONFIG ADD (USE_POLICY_MAP CHAR(1) DEFAULT 'N');

/* 2 */
ALTER TABLE SYNCH_CONFIG MODIFY (USE_POLICY_MAP CHAR(1) DEFAULT 'Y');
ALTER TABLE SYNCH_CONFIG ADD (USE_TRANSFORM_SCRIPT CHAR(1) DEFAULT 'Y');
ALTER TABLE SYNCH_CONFIG ADD (POLICY_MAP_BEFORE_TRANSFORM CHAR(1) DEFAULT 'Y');

/* 3 */
ALTER TABLE COMPANY_ATTRIBUTE MODIFY (METADATA_ID VARCHAR2(32));
ALTER TABLE COMPANY_ATTRIBUTE MODIFY (NAME VARCHAR2(100));

/* 4 */
CREATE TABLE ORGANIZATION_TYPE (
  ORG_TYPE_ID VARCHAR2(32) NOT NULL,
  NAME VARCHAR2(100) NOT NULL,
  DESCRIPTION VARCHAR2(100) NULL,
  PRIMARY KEY (ORG_TYPE_ID)
);


INSERT INTO ORGANIZATION_TYPE (ORG_TYPE_ID, NAME) VALUES('ORGANIZATION', 'Organization');
INSERT INTO ORGANIZATION_TYPE (ORG_TYPE_ID, NAME) VALUES('DEPARTMENT', 'Department');
INSERT INTO ORGANIZATION_TYPE (ORG_TYPE_ID, NAME) VALUES('DIVISION', 'Division');
INSERT INTO ORGANIZATION_TYPE (ORG_TYPE_ID, NAME) VALUES('SUBSIDIARY', 'Subsidiary');

CREATE TABLE ORG_TYPE_VALID_MEMBERSHIP (
	ORG_TYPE_ID VARCHAR2(32) NOT NULL,
	MEMBER_ORG_TYPE_ID VARCHAR2(32) NOT NULL
);


INSERT INTO ORG_TYPE_VALID_MEMBERSHIP (ORG_TYPE_ID, MEMBER_ORG_TYPE_ID) VALUES('ORGANIZATION', 'DEPARTMENT');
INSERT INTO ORG_TYPE_VALID_MEMBERSHIP (ORG_TYPE_ID, MEMBER_ORG_TYPE_ID) VALUES('ORGANIZATION', 'DIVISION');
INSERT INTO ORG_TYPE_VALID_MEMBERSHIP (ORG_TYPE_ID, MEMBER_ORG_TYPE_ID) VALUES('ORGANIZATION', 'SUBSIDIARY');
INSERT INTO ORG_TYPE_VALID_MEMBERSHIP (ORG_TYPE_ID, MEMBER_ORG_TYPE_ID) VALUES('SUBSIDIARY', 'DIVISION');
INSERT INTO ORG_TYPE_VALID_MEMBERSHIP (ORG_TYPE_ID, MEMBER_ORG_TYPE_ID) VALUES('DIVISION', 'DEPARTMENT');

ALTER TABLE ORG_TYPE_VALID_MEMBERSHIP ADD CONSTRAINT ORG_T_VAL_MEM_SOURCE_FK FOREIGN KEY (ORG_TYPE_ID) REFERENCES ORGANIZATION_TYPE(ORG_TYPE_ID);
ALTER TABLE ORG_TYPE_VALID_MEMBERSHIP ADD CONSTRAINT ORG_T_VAL_MEM_TARGET_FK FOREIGN KEY (MEMBER_ORG_TYPE_ID) REFERENCES ORGANIZATION_TYPE(ORG_TYPE_ID);
ALTER TABLE ORG_TYPE_VALID_MEMBERSHIP ADD CONSTRAINT UNIQUE_USER_ORG_TYPE UNIQUE(ORG_TYPE_ID, MEMBER_ORG_TYPE_ID);
CREATE INDEX ORG_T_VAL_MEM_SOURCE_FK ON ORG_TYPE_VALID_MEMBERSHIP(ORG_TYPE_ID);
CREATE INDEX ORG_T_VAL_MEM_TARGET_FK ON ORG_TYPE_VALID_MEMBERSHIP(MEMBER_ORG_TYPE_ID);

ALTER TABLE COMPANY ADD (ORG_TYPE_ID VARCHAR2(32) NULL);
UPDATE COMPANY SET ORG_TYPE_ID=CLASSIFICATION;
UPDATE COMPANY SET ORG_TYPE_ID=NULL WHERE ORG_TYPE_ID NOT IN (SELECT ORG_TYPE_ID FROM ORGANIZATION_TYPE);
ALTER TABLE COMPANY ADD CONSTRAINT COMPANY_ORG_TYPE_FK FOREIGN KEY (ORG_TYPE_ID) REFERENCES ORGANIZATION_TYPE(ORG_TYPE_ID);
CREATE INDEX COMPANY_ORG_TYPE_FK ON COMPANY(ORG_TYPE_ID);


CREATE UNIQUE INDEX USER_AFFILIATION_UNIQUE ON USER_AFFILIATION(USER_ID, COMPANY_ID);

/* 5 */
DROP TABLE URI_PATTERN_META_VALUE;
DROP TABLE AUTH_RESOURCE_ATTRIBUTE_MAP;
DROP TABLE AUTH_RESOURCE_AM_ATTRIBUTE;

CREATE TABLE AUTH_RESOURCE_AM_ATTRIBUTE (
  AM_RES_ATTRIBUTE_ID VARCHAR2(32) NOT NULL,
  REFLECTION_KEY VARCHAR2(255) NOT NULL,
  ATTRIBUTE_NAME VARCHAR2(100) NOT NULL,
  PRIMARY KEY (AM_RES_ATTRIBUTE_ID)
);
ALTER TABLE AUTH_RESOURCE_AM_ATTRIBUTE ADD CONSTRAINT REFLECTION_KEY_IDX UNIQUE(REFLECTION_KEY);

INSERT INTO AUTH_RESOURCE_AM_ATTRIBUTE (AM_RES_ATTRIBUTE_ID, REFLECTION_KEY,ATTRIBUTE_NAME) VALUES('1,', 'Login.login','Principal');
INSERT INTO AUTH_RESOURCE_AM_ATTRIBUTE (AM_RES_ATTRIBUTE_ID, REFLECTION_KEY,ATTRIBUTE_NAME) VALUES('2', 'User.title','Functional Title');
INSERT INTO AUTH_RESOURCE_AM_ATTRIBUTE (AM_RES_ATTRIBUTE_ID, REFLECTION_KEY, ATTRIBUTE_NAME) VALUES('3', 'Login.password', 'Password');

CREATE TABLE AUTH_RESOURCE_ATTRIBUTE_MAP (
  ATTRIBUTE_MAP_ID VARCHAR2(32) NOT NULL,
  PROVIDER_ID VARCHAR2(32) NOT NULL,
  TARGET_ATTRIBUTE_NAME VARCHAR2(100) NOT NULL,
  AM_RES_ATTRIBUTE_ID VARCHAR2(32) NOT NULL,
  AM_POLICY_URL VARCHAR2(100) DEFAULT NULL,
  ATTRIBUTE_VALUE VARCHAR2(100) DEFAULT NULL,
  ATTRIBUTE_TYPE VARCHAR2(32) NOT NULL,
  PRIMARY KEY (ATTRIBUTE_MAP_ID),
  CONSTRAINT FK_PROVIDER_AUTH_RES_ATTR_MAP FOREIGN KEY (PROVIDER_ID) REFERENCES AUTH_PROVIDER (PROVIDER_ID),
  CONSTRAINT FK_AUTH_AM_ATTR FOREIGN KEY (AM_RES_ATTRIBUTE_ID) REFERENCES AUTH_RESOURCE_AM_ATTRIBUTE (AM_RES_ATTRIBUTE_ID)
);

CREATE INDEX FK_PROVIDER_AUTH_RES_ATTR_MAP ON AUTH_RESOURCE_ATTRIBUTE_MAP(PROVIDER_ID);
CREATE INDEX FK_AUTH_AM_ATTR ON AUTH_RESOURCE_ATTRIBUTE_MAP(AM_RES_ATTRIBUTE_ID);

CREATE TABLE URI_PATTERN_META_VALUE (
  URI_PATTERN_META_VALUE_ID VARCHAR2(32) NOT NULL,
  URI_PATTERN_META_ID VARCHAR2(32) NOT NULL,
  META_ATTRIBUTE_NAME VARCHAR2(100) NOT NULL,
  AM_RES_ATTRIBUTE_ID VARCHAR2(32) NULL,
  STATIC_VALUE VARCHAR2(100) NULL,
  GROOVY_SCRIPT VARCHAR2(200) NULL,
  PRIMARY KEY (URI_PATTERN_META_VALUE_ID),
  CONSTRAINT URI_PATTERN_META_VALUE_AM_FK FOREIGN KEY (AM_RES_ATTRIBUTE_ID) REFERENCES AUTH_RESOURCE_AM_ATTRIBUTE (AM_RES_ATTRIBUTE_ID),
  CONSTRAINT URI_PATTERN_META_VALUE_META_FK FOREIGN KEY (URI_PATTERN_META_ID) REFERENCES URI_PATTERN_META (URI_PATTERN_META_ID)
);

CREATE INDEX URI_PATTERN_META_VALUE_AM_FK ON URI_PATTERN_META_VALUE(AM_RES_ATTRIBUTE_ID);
CREATE INDEX URI_PATTERN_META_VALUE_META_FK ON URI_PATTERN_META_VALUE(URI_PATTERN_META_ID);

/* 6 */
DECLARE
	cnt NUMBER := 0;
    attrId NUMBER := 1;
    CURSOR c1 is SELECT USER_ID, COMPANY_ID, DEPT_CD, DEPT_NAME FROM USERS;
BEGIN
  FOR C_RECORD in c1
  LOOP
    IF (C_RECORD.USER_ID IS NOT NULL) THEN
		IF (C_RECORD.COMPANY_ID IS NOT NULL) THEN
			SELECT count(1) INTO cnt FROM COMPANY WHERE COMPANY_ID=C_RECORD.COMPANY_ID;
			IF (cnt = 1) THEN
				SELECT count(1) INTO cnt  FROM USER_AFFILIATION WHERE COMPANY_ID=C_RECORD.COMPANY_ID AND USER_ID=C_RECORD.USER_ID;
				IF (cnt <= 0) THEN
					INSERT INTO USER_AFFILIATION (USER_AFFILIATION_ID, USER_ID, COMPANY_ID) VALUES(attrId, C_RECORD.USER_ID, C_RECORD.COMPANY_ID);
					attrId:=attrId+1;
				END IF;
			END IF;
		END IF;

		IF (C_RECORD.DEPT_CD IS NOT NULL) THEN
			SELECT count(1) INTO cnt FROM COMPANY WHERE COMPANY_ID=C_RECORD.DEPT_CD;
			IF (cnt = 1) THEN
				SELECT count(1) INTO cnt FROM USER_AFFILIATION WHERE COMPANY_ID=C_RECORD.DEPT_CD AND USER_ID=C_RECORD.USER_ID;
				IF (cnt <= 0) THEN
					INSERT INTO USER_AFFILIATION (USER_AFFILIATION_ID, USER_ID, COMPANY_ID) VALUES(attrId, C_RECORD.USER_ID, C_RECORD.DEPT_CD);
					attrId:=attrId+1;
				END IF;
			END IF;
		END IF;
				
		IF (C_RECORD.DEPT_NAME IS NOT NULL) THEN
			SELECT count(1) INTO cnt FROM COMPANY WHERE COMPANY_ID=C_RECORD.DEPT_NAME;
			IF (cnt = 1) THEN
				SELECT count(1) INTO cnt FROM USER_AFFILIATION WHERE COMPANY_ID=C_RECORD.DEPT_NAME AND USER_ID=C_RECORD.USER_ID;
				IF (cnt <= 0) THEN
					INSERT INTO USER_AFFILIATION (USER_AFFILIATION_ID, USER_ID, COMPANY_ID) VALUES(attrId, C_RECORD.USER_ID, C_RECORD.DEPT_NAME);
					attrId:=attrId+1;
				END IF;
			END IF;
		END IF;
	END IF;
  END LOOP;
  COMMIT;
END;
/

ALTER TABLE USERS DROP CONSTRAINT FK_USERS_DEPARTMENT;
ALTER TABLE USERS DROP CONSTRAINT FK_USERS_DIVISION;
ALTER TABLE USERS DROP CONSTRAINT FK_USERS_COMPANY;
DROP INDEX FK_USERS_DEPARTMENT;
DROP INDEX FK_USERS_DIVISION;
DROP INDEX FK_USERS_COMPANY;

ALTER TABLE USERS DROP COLUMN DEPT_CD;
ALTER TABLE USERS DROP COLUMN DEPT_NAME;
ALTER TABLE USERS DROP COLUMN DIVISION;
ALTER TABLE USERS DROP COLUMN COMPANY_ID;







/* 7 */
ALTER TABLE USERS ADD (DATE_IT_POLICY_APPROVED TIMESTAMP NULL);


CREATE  TABLE IT_POLICY (
  IT_POLICY_ID VARCHAR2(32) NOT NULL,
  APPROVE_TYPE VARCHAR2(64) DEFAULT 'Once' NOT NULL,
  ACTIVE CHAR(1) DEFAULT 'N' NOT NULL,
  CREATE_DATE TIMESTAMP,
  UPDATE_DATE TIMESTAMP,
  CREATED_BY VARCHAR2(32),
  UPDATED_BY VARCHAR2(32),
  POLICY_CONTENT CLOB,
  CONFIRMATION VARCHAR2(255),
  PRIMARY KEY (IT_POLICY_ID)
);


/* 8 */
ALTER TABLE ORGANIZATION_TYPE ADD CONSTRAINT UNIQUE_ORG_TYPE UNIQUE(NAME);

/* 9  */

ALTER TABLE BATCH_CONFIG ADD (T_ENABLED CHAR(1) DEFAULT 'N');
UPDATE BATCH_CONFIG SET T_ENABLED='Y' WHERE ENABLED = 1;
ALTER TABLE BATCH_CONFIG DROP COLUMN ENABLED;
ALTER TABLE BATCH_CONFIG RENAME COLUMN T_ENABLED TO ENABLED;
ALTER TABLE BATCH_CONFIG MODIFY ( ENABLED CHAR(1) DEFAULT 'N' NOT NULL);


/* 10 */

ALTER TABLE BATCH_CONFIG ADD (LAST_MODIFIED_DATETIME TIMESTAMP NULL);
ALTER TABLE BATCH_CONFIG ADD (RUN_ON TIMESTAMP NULL);
ALTER TABLE BATCH_CONFIG ADD (CRON_EXPRESSION VARCHAR(100) NULL);
ALTER TABLE BATCH_CONFIG ADD (SPRING_BEAN VARCHAR(100) NULL);
ALTER TABLE BATCH_CONFIG ADD (SPRING_BEAN_METHOD VARCHAR(100) NULL);

UPDATE BATCH_CONFIG SET CRON_EXPRESSION='0 0/1 * 1/1 * ? *' WHERE FREQUENCY_UNIT_OF_MEASURE='MINUTE';
UPDATE BATCH_CONFIG SET CRON_EXPRESSION='0 0 0 1/1 * ? *' WHERE FREQUENCY_UNIT_OF_MEASURE='NIGHTLY';

UPDATE BATCH_CONFIG SET CRON_EXPRESSION='0 0/1 * * * ?' WHERE CRON_EXPRESSION='0 0/1 * 1/1 * ? *';
UPDATE BATCH_CONFIG SET CRON_EXPRESSION='0 0 0 1/1 * ?' WHERE CRON_EXPRESSION='0 0 0 1/1 * ? *';

ALTER TABLE BATCH_CONFIG DROP COLUMN FREQUENCY;
ALTER TABLE BATCH_CONFIG DROP COLUMN FREQUENCY_UNIT_OF_MEASURE;

CREATE TRIGGER ON_BATCH_TASK_INSERT 
BEFORE 
INSERT ON BATCH_CONFIG 
	FOR EACH ROW
	BEGIN
    	:NEW.LAST_MODIFIED_DATETIME := CURRENT_TIMESTAMP;
	END;	
/
	
CREATE TRIGGER ON_BATCH_TASK_UPDATE
BEFORE 
UPDATE ON BATCH_CONFIG 
	FOR EACH ROW
	BEGIN
    	:NEW.LAST_MODIFIED_DATETIME := CURRENT_TIMESTAMP;
	END;	
/


/* 11 */


CREATE TABLE UI_TEMPLATE_TYPE (
	TEMPLATE_TYPE_ID VARCHAR2(32) NOT NULL,
	NAME VARCHAR2(100) NOT NULL,
	DESCRIPTION VARCHAR2(200),
	PRIMARY KEY(TEMPLATE_TYPE_ID)
);

INSERT INTO UI_TEMPLATE_TYPE (TEMPLATE_TYPE_ID, NAME, DESCRIPTION) VALUES('USER_TEMPLATE', 'User Page Tempate', 'Template for SelfService User-centric pages');
ALTER TABLE METADATA_ELEMENT_PAGE_TEMPLATE ADD (TEMPLATE_TYPE_ID VARCHAR(32) NULL);
UPDATE METADATA_ELEMENT_PAGE_TEMPLATE SET TEMPLATE_TYPE_ID='USER_TEMPLATE';
ALTER TABLE METADATA_ELEMENT_PAGE_TEMPLATE MODIFY (TEMPLATE_TYPE_ID VARCHAR(32) NOT NULL);
ALTER TABLE METADATA_ELEMENT_PAGE_TEMPLATE ADD CONSTRAINT TEMPLATE_TYPE_FK FOREIGN KEY(TEMPLATE_TYPE_ID) REFERENCES UI_TEMPLATE_TYPE(TEMPLATE_TYPE_ID);
CREATE INDEX TEMPLATE_TYPE_FK ON METADATA_ELEMENT_PAGE_TEMPLATE(TEMPLATE_TYPE_ID);

CREATE TABLE UI_TEMPLATE_FIELDS (
	UI_FIELD_ID VARCHAR2(32) NOT NULL,
	NAME VARCHAR2(100) NOT NULL,
	DESCRIPTION VARCHAR2(200),
	TEMPLATE_TYPE_ID VARCHAR2(32) NOT NULL,
	IS_REQUIRED CHAR(1) DEFAULT 'N' NOT NULL,
	PRIMARY KEY(UI_FIELD_ID),
  CONSTRAINT TEMPLATE_TYPE_UI_TEMPL_FK FOREIGN KEY (TEMPLATE_TYPE_ID) REFERENCES UI_TEMPLATE_TYPE(TEMPLATE_TYPE_ID)
);

CREATE INDEX TEMPLATE_TYPE_UI_TEMPL_FK ON UI_TEMPLATE_FIELDS(TEMPLATE_TYPE_ID);


INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID, IS_REQUIRED) VALUES('USER_FIRST_NAME', 'First Name', 'USER_TEMPLATE', 'Y');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID, IS_REQUIRED) VALUES('USER_LAST_NAME', 'Last Name', 'USER_TEMPLATE', 'Y');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_MIDDLE_INIT', 'Middle Initial', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_MAIDEN_NAME', 'Maiden Name', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_NICKNAME', 'User NickName', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_DOB', 'Date of Birth', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_TITLE', 'User Title', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_GENDER', 'Gender', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_EMPLOYEE_ID', 'Employee ID', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_EMPLOYEE_TYPE', 'Employee Type', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_LOCATION_CODE', 'Location Code', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_LOCATION_NAME', 'Location Name', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_SELECT_SUPERVISOR', 'Select Supervisor', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_CLASSICIATION', 'User Classification', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_PREFIX', 'Prefix', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_STATUS', 'User Status', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_SECONDARY_STATUS', 'Account Status', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_SUFFIX', 'User Suffix', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_ALTERNATE_CONTACT', 'Alternate Contact', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_MAILCODE', 'Mail Code', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_COST_CENTER', 'Cost Center', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_JOB_CODE', 'Job Code', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_USER_TYPE', 'User Type', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_OBJECT_TYPE', 'User Type', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_START_DATE', 'Start Date', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_END_DATE', 'End Date', 'USER_TEMPLATE');

INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_ADDRESS_REQUIRED', 'User is required to input at least one address', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_PHONES_REQUIRED', 'User is required to input at least one phone number', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_PHONES_CREATABLE', 'User can input phone numbers', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_ADDRESSES_CREATABLE', 'User can input addresses', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_SHOW_ROLES', 'User can select a Role', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_SHOW_GROUPS', 'User can select a Group', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_SHOW_ORGANIZATIONS', 'User can define his organizational structure', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID, IS_REQUIRED) VALUES('USER_CREATE_LOGIN', 'User can create a custom login', 'USER_TEMPLATE', 'Y');


CREATE TABLE UI_FIELD_TEMPLATE_XREF (
	UI_FIELD_ID VARCHAR2(32) NOT NULL,
	TEMPLATE_ID VARCHAR2(32) NOT NULL,
	IS_REQUIRED CHAR(1) DEFAULT 'N' NOT NULL,
	IS_EDITABLE CHAR(1) DEFAULT 'Y' NOT NULL,
	DISPLAY_ORDER NUMBER(3) NOT NULL,
	CONSTRAINT TEMPLATE_XREF_UI_FIELD_FK FOREIGN KEY (UI_FIELD_ID) REFERENCES UI_TEMPLATE_FIELDS(UI_FIELD_ID),
	CONSTRAINT TEMPLATE_XREF_TEMPLATE_FK FOREIGN KEY (TEMPLATE_ID) REFERENCES METADATA_ELEMENT_PAGE_TEMPLATE(ID),
	CONSTRAINT TEMPLATE_XREF_UNIQUE UNIQUE(TEMPLATE_ID, UI_FIELD_ID)
);


CREATE INDEX TEMPLATE_XREF_UI_FIELD_FK ON UI_FIELD_TEMPLATE_XREF(UI_FIELD_ID);
CREATE INDEX TEMPLATE_XREF_TEMPLATE_FK ON UI_FIELD_TEMPLATE_XREF(TEMPLATE_ID);


/* 12 */
DECLARE
    cnt NUMBER := 0;
    attrId NUMBER := 1;
    CURSOR c1 is SELECT USER_ID, MANAGER_ID FROM USERS;
BEGIN
  FOR C_RECORD in c1
    LOOP
      IF (C_RECORD.MANAGER_ID IS NOT NULL) THEN
        SELECT count(1) INTO cnt FROM ORG_STRUCTURE WHERE SUPERVISOR_ID=C_RECORD.MANAGER_ID AND STAFF_ID=C_RECORD.USER_ID;
        IF (cnt <= 0) THEN
          INSERT INTO ORG_STRUCTURE (ORG_STRUCTURE_ID, SUPERVISOR_ID, STAFF_ID) VALUES (attrId, C_RECORD.MANAGER_ID, C_RECORD.USER_ID);
          attrId:=attrId+1;
        END IF;
      END IF;
    END LOOP;
  COMMIT;
END;
/

ALTER TABLE USERS DROP COLUMN MANAGER_ID;



/* 13 */

DELETE FROM METADATA_TYPE WHERE GROUPING IN ('EMAIL', 'PHONE', 'ADDRESS');  

INSERT INTO METADATA_TYPE(TYPE_ID,DESCRIPTION,ACTIVE,GROUPING) VALUES ('WORK_EMAIL','Work Email','Y','EMAIL');
INSERT INTO METADATA_TYPE(TYPE_ID,DESCRIPTION,ACTIVE,GROUPING) VALUES ('PRIMARY_EMAIL','Primary Email','Y','EMAIL');
INSERT INTO METADATA_TYPE(TYPE_ID,DESCRIPTION,ACTIVE,GROUPING) VALUES ('HOME_EMAIL','Home Email','Y','EMAIL');

INSERT INTO METADATA_TYPE(TYPE_ID,DESCRIPTION,ACTIVE,GROUPING) VALUES('OFFICE_PHONE','Office phone','Y','PHONE');
INSERT INTO METADATA_TYPE(TYPE_ID,DESCRIPTION,ACTIVE,GROUPING) VALUES('CELL_PHONE','Cell phone','Y','PHONE');
INSERT INTO METADATA_TYPE(TYPE_ID,DESCRIPTION,ACTIVE,GROUPING) VALUES('HOME_PHONE','Home phone','Y','PHONE');


INSERT INTO METADATA_TYPE(TYPE_ID,DESCRIPTION,ACTIVE,GROUPING) VALUES('OFFICE_ADDRESS','Office Address','Y','ADDRESS');
INSERT INTO METADATA_TYPE(TYPE_ID,DESCRIPTION,ACTIVE,GROUPING) VALUES('HOME_ADDRESS','Home Address','Y','ADDRESS');

ALTER TABLE EMAIL_ADDRESS ADD (TYPE_ID VARCHAR2(32));
ALTER TABLE ADDRESS ADD (TYPE_ID VARCHAR2(32));
ALTER TABLE PHONE ADD (TYPE_ID VARCHAR2(32));

UPDATE EMAIL_ADDRESS SET TYPE_ID='WORK_EMAIL';
UPDATE ADDRESS SET TYPE_ID='OFFICE_ADDRESS';
UPDATE PHONE SET TYPE_ID='OFFICE_PHONE';


ALTER TABLE EMAIL_ADDRESS MODIFY (TYPE_ID VARCHAR2(32) NOT NULL);
ALTER TABLE ADDRESS MODIFY (TYPE_ID VARCHAR2(32) NOT NULL);
ALTER TABLE PHONE MODIFY (TYPE_ID VARCHAR2(32) NOT NULL);


ALTER TABLE EMAIL_ADDRESS ADD CONSTRAINT EMAIL_ADDRESS_TYPE_FK FOREIGN KEY (TYPE_ID) REFERENCES METADATA_TYPE(TYPE_ID); 
ALTER TABLE ADDRESS ADD CONSTRAINT ADDRESS_TYPE_FK FOREIGN KEY (TYPE_ID) REFERENCES METADATA_TYPE(TYPE_ID);
ALTER TABLE PHONE ADD CONSTRAINT PHONE_TYPE_FK FOREIGN KEY (TYPE_ID) REFERENCES METADATA_TYPE(TYPE_ID);


CREATE INDEX EMAIL_ADDRESS_TYPE_FK ON EMAIL_ADDRESS(TYPE_ID);
CREATE INDEX ADDRESS_TYPE_FK ON ADDRESS(TYPE_ID);
CREATE INDEX PHONE_TYPE_FK ON PHONE(TYPE_ID);



/* 14 */

DROP TABLE REPORT_INFO;

CREATE TABLE REPORT_PARAMETER_TYPE (
  RCPT_ID VARCHAR2(100) DEFAULT NULL,
  TYPE_NAME VARCHAR2(100) DEFAULT NULL,
  TYPE_DESCRIPTION VARCHAR2(100) DEFAULT NULL
);

CREATE TABLE REPORT_INFO (
  REPORT_INFO_ID VARCHAR2(32) NOT NULL,
  REPORT_NAME VARCHAR2(64) NOT NULL,
  DATASOURCE_FILE_PATH VARCHAR2(255) NOT NULL,
  REPORT_FILE_PATH VARCHAR2(255) DEFAULT NULL,
  PRIMARY KEY (REPORT_INFO_ID)
);

ALTER TABLE REPORT_INFO ADD CONSTRAINT REPORT_NAME UNIQUE(REPORT_NAME);

CREATE TABLE  REPORT_CRITERIA_PARAMETER(
  RCP_ID VARCHAR2(32) NOT NULL,
  REPORT_INFO_ID VARCHAR2(32) NOT NULL,
  PARAM_NAME VARCHAR2(64) NOT NULL,
  PARAM_VALUE VARCHAR2(64) DEFAULT NULL,
  RCPT_ID VARCHAR2(100) DEFAULT NULL,
  PRIMARY KEY (RCP_ID)
);


CREATE TABLE REPORT_SUBSCRIPTIONS (
  REPORT_SUB_ID VARCHAR2(32) NOT NULL,
  REPORT_INFO_ID VARCHAR2(45) DEFAULT NULL,
  REPORT_NAME VARCHAR2(64) NOT NULL,
  DELIVERY_METHOD VARCHAR2(45) DEFAULT NULL,
  DELIVERY_FORMAT VARCHAR2(45) DEFAULT NULL,
  DELIVERY_AUDIENCE VARCHAR2(45) DEFAULT NULL,
  STATUS VARCHAR2(45) DEFAULT NULL,
  USERID VARCHAR2(45) DEFAULT NULL,
  PRIMARY KEY (REPORT_SUB_ID)
);


CREATE TABLE  REPORT_SUB_CRITERIA_PARAM (
  RSCP_ID VARCHAR2(45) NOT NULL,
  RCP_ID VARCHAR2(32) DEFAULT NULL,
  REPORT_SUB_ID VARCHAR2(32) DEFAULT NULL,
  PARAM_NAME VARCHAR2(64) DEFAULT NULL,
  PARAM_VALUE VARCHAR2(64) DEFAULT NULL,
  PRIMARY KEY (RSCP_ID)
);
