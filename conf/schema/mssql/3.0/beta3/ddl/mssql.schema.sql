/* 1 */
USE openiam;
ALTER TABLE ATTRIBUTE_MAP ADD SYNCH_CONFIG_ID NVARCHAR(32) NULL;
ALTER TABLE ATTRIBUTE_MAP ALTER COLUMN MANAGED_SYS_ID NVARCHAR(32);
ALTER TABLE ATTRIBUTE_MAP ADD DEFAULT NULL FOR MANAGED_SYS_ID;
ALTER TABLE SYNCH_CONFIG ADD USE_POLICY_MAP CHAR(1) DEFAULT 'Y';

/* 2 */
ALTER TABLE SYNCH_CONFIG ADD USE_TRANSFORM_SCRIPT CHAR(1) DEFAULT 'Y';
ALTER TABLE SYNCH_CONFIG ADD POLICY_MAP_BEFORE_TRANSFORM CHAR(1) DEFAULT 'Y';

/* 3 */
ALTER TABLE COMPANY_ATTRIBUTE ALTER COLUMN METADATA_ID NVARCHAR(32);
ALTER TABLE COMPANY_ATTRIBUTE ALTER COLUMN NAME NVARCHAR(100);

/* 4 */
CREATE TABLE ORGANIZATION_TYPE (
  ORG_TYPE_ID NVARCHAR(32) NOT NULL,
  NAME NVARCHAR(100) NOT NULL,
  DESCRIPTION NVARCHAR(100) NULL,
  PRIMARY KEY (ORG_TYPE_ID)
);


INSERT INTO ORGANIZATION_TYPE (ORG_TYPE_ID, NAME) VALUES('ORGANIZATION', 'Organization');
INSERT INTO ORGANIZATION_TYPE (ORG_TYPE_ID, NAME) VALUES('DEPARTMENT', 'Department');
INSERT INTO ORGANIZATION_TYPE (ORG_TYPE_ID, NAME) VALUES('DIVISION', 'Division');
INSERT INTO ORGANIZATION_TYPE (ORG_TYPE_ID, NAME) VALUES('SUBSIDIARY', 'Subsidiary');

CREATE TABLE ORG_TYPE_VALID_MEMBERSHIP (
	ORG_TYPE_ID NVARCHAR(32) NOT NULL,
	MEMBER_ORG_TYPE_ID NVARCHAR(32) NOT NULL
);


INSERT INTO ORG_TYPE_VALID_MEMBERSHIP (ORG_TYPE_ID, MEMBER_ORG_TYPE_ID) VALUES('ORGANIZATION', 'DEPARTMENT');
INSERT INTO ORG_TYPE_VALID_MEMBERSHIP (ORG_TYPE_ID, MEMBER_ORG_TYPE_ID) VALUES('ORGANIZATION', 'DIVISION');
INSERT INTO ORG_TYPE_VALID_MEMBERSHIP (ORG_TYPE_ID, MEMBER_ORG_TYPE_ID) VALUES('ORGANIZATION', 'SUBSIDIARY');
INSERT INTO ORG_TYPE_VALID_MEMBERSHIP (ORG_TYPE_ID, MEMBER_ORG_TYPE_ID) VALUES('SUBSIDIARY', 'DIVISION');
INSERT INTO ORG_TYPE_VALID_MEMBERSHIP (ORG_TYPE_ID, MEMBER_ORG_TYPE_ID) VALUES('DIVISION', 'DEPARTMENT');

ALTER TABLE ORG_TYPE_VALID_MEMBERSHIP ADD CONSTRAINT ORG_T_VAL_MEM_SOURCE_FK FOREIGN KEY (ORG_TYPE_ID) REFERENCES ORGANIZATION_TYPE(ORG_TYPE_ID);
ALTER TABLE ORG_TYPE_VALID_MEMBERSHIP ADD CONSTRAINT ORG_T_VAL_MEM_TARGET_FK FOREIGN KEY (MEMBER_ORG_TYPE_ID) REFERENCES ORGANIZATION_TYPE(ORG_TYPE_ID);
ALTER TABLE ORG_TYPE_VALID_MEMBERSHIP ADD CONSTRAINT UNIQUE_USER_ORG_TYPE UNIQUE(ORG_TYPE_ID, MEMBER_ORG_TYPE_ID);
CREATE INDEX ORG_T_VAL_MEM_SOURCE_FK ON ORG_TYPE_VALID_MEMBERSHIP(ORG_TYPE_ID);
CREATE INDEX ORG_T_VAL_MEM_TARGET_FK ON ORG_TYPE_VALID_MEMBERSHIP(MEMBER_ORG_TYPE_ID);

ALTER TABLE COMPANY ADD ORG_TYPE_ID NVARCHAR(32) NULL;
GO
UPDATE COMPANY SET ORG_TYPE_ID=CLASSIFICATION;
UPDATE COMPANY SET ORG_TYPE_ID=NULL WHERE ORG_TYPE_ID NOT IN (SELECT ORG_TYPE_ID FROM ORGANIZATION_TYPE);
ALTER TABLE COMPANY ADD CONSTRAINT COMPANY_ORG_TYPE_FK FOREIGN KEY (ORG_TYPE_ID) REFERENCES ORGANIZATION_TYPE(ORG_TYPE_ID);
CREATE INDEX COMPANY_ORG_TYPE_FK ON COMPANY(ORG_TYPE_ID);


CREATE UNIQUE INDEX USER_AFFILIATION_UNIQUE ON USER_AFFILIATION(USER_ID, COMPANY_ID);

/* 5 */
DROP TABLE URI_PATTERN_META_VALUE;
DROP TABLE AUTH_RESOURCE_ATTRIBUTE_MAP;
DROP TABLE AUTH_RESOURCE_AM_ATTRIBUTE;

CREATE TABLE AUTH_RESOURCE_AM_ATTRIBUTE (
  AM_RES_ATTRIBUTE_ID NVARCHAR(32) NOT NULL,
  REFLECTION_KEY NVARCHAR(255) NOT NULL,
  ATTRIBUTE_NAME NVARCHAR(100) NOT NULL,
  PRIMARY KEY (AM_RES_ATTRIBUTE_ID)
);
GO
ALTER TABLE AUTH_RESOURCE_AM_ATTRIBUTE ADD CONSTRAINT REFLECTION_KEY_IDX UNIQUE(REFLECTION_KEY);
GO
INSERT INTO AUTH_RESOURCE_AM_ATTRIBUTE (AM_RES_ATTRIBUTE_ID, REFLECTION_KEY,ATTRIBUTE_NAME) VALUES('1,', 'Login.login','Principal');
INSERT INTO AUTH_RESOURCE_AM_ATTRIBUTE (AM_RES_ATTRIBUTE_ID, REFLECTION_KEY,ATTRIBUTE_NAME) VALUES('2', 'User.title','Functional Title');
INSERT INTO AUTH_RESOURCE_AM_ATTRIBUTE (AM_RES_ATTRIBUTE_ID, REFLECTION_KEY, ATTRIBUTE_NAME) VALUES('3', 'Login.password', 'Password');

CREATE TABLE AUTH_RESOURCE_ATTRIBUTE_MAP (
  ATTRIBUTE_MAP_ID NVARCHAR(32) NOT NULL,
  PROVIDER_ID NVARCHAR(32) NOT NULL,
  TARGET_ATTRIBUTE_NAME NVARCHAR(100) NOT NULL,
  AM_RES_ATTRIBUTE_ID NVARCHAR(32) NOT NULL,
  AM_POLICY_URL NVARCHAR(100) DEFAULT NULL,
  ATTRIBUTE_VALUE NVARCHAR(100) DEFAULT NULL,
  ATTRIBUTE_TYPE NVARCHAR(32) NOT NULL,
  PRIMARY KEY (ATTRIBUTE_MAP_ID),
  CONSTRAINT FK_PROVIDER_AUTH_RES_ATTR_MAP FOREIGN KEY (PROVIDER_ID) REFERENCES AUTH_PROVIDER (PROVIDER_ID),
  CONSTRAINT FK_AUTH_AM_ATTR FOREIGN KEY (AM_RES_ATTRIBUTE_ID) REFERENCES AUTH_RESOURCE_AM_ATTRIBUTE (AM_RES_ATTRIBUTE_ID)
);

CREATE INDEX FK_PROVIDER_AUTH_RES_ATTR_MAP ON AUTH_RESOURCE_ATTRIBUTE_MAP(PROVIDER_ID);
CREATE INDEX FK_AUTH_AM_ATTR ON AUTH_RESOURCE_ATTRIBUTE_MAP(AM_RES_ATTRIBUTE_ID);

CREATE TABLE URI_PATTERN_META_VALUE (
  URI_PATTERN_META_VALUE_ID NVARCHAR(32) NOT NULL,
  URI_PATTERN_META_ID NVARCHAR(32) NOT NULL,
  META_ATTRIBUTE_NAME NVARCHAR(100) NOT NULL,
  AM_RES_ATTRIBUTE_ID NVARCHAR(32) NULL,
  STATIC_VALUE NVARCHAR(100) NULL,
  GROOVY_SCRIPT NVARCHAR(200) NULL,
  PRIMARY KEY (URI_PATTERN_META_VALUE_ID),
  CONSTRAINT URI_PATTERN_META_VALUE_AM_FK FOREIGN KEY (AM_RES_ATTRIBUTE_ID) REFERENCES AUTH_RESOURCE_AM_ATTRIBUTE (AM_RES_ATTRIBUTE_ID),
  CONSTRAINT URI_PATTERN_META_VALUE_META_FK FOREIGN KEY (URI_PATTERN_META_ID) REFERENCES URI_PATTERN_META (URI_PATTERN_META_ID)
);

CREATE INDEX URI_PATTERN_META_VALUE_AM_FK ON URI_PATTERN_META_VALUE(AM_RES_ATTRIBUTE_ID);
CREATE INDEX URI_PATTERN_META_VALUE_META_FK ON URI_PATTERN_META_VALUE(URI_PATTERN_META_ID);

/* 6 */
GO
DECLARE
	@cnt NUMERIC,
    @attrId NUMERIC;
    SET @cnt = 0;
    SET @attrId = 1;
DECLARE @USER_ID NVARCHAR(32), @COMPANY_ID NVARCHAR(32), @DEPT_CD NVARCHAR(32), @DEPT_NAME NVARCHAR(100);
DECLARE c1 CURSOR FOR SELECT USER_ID, COMPANY_ID, DEPT_CD, DEPT_NAME FROM USERS;
BEGIN
  OPEN c1;
  FETCH NEXT FROM c1 INTO @USER_ID, @COMPANY_ID, @DEPT_CD, @DEPT_NAME;
  WHILE @@FETCH_STATUS = 0
  BEGIN
    IF (@USER_ID IS NOT NULL) 
    BEGIN
		IF (@COMPANY_ID IS NOT NULL) 
		BEGIN
			SELECT @cnt = count(1) FROM COMPANY WHERE COMPANY_ID=@COMPANY_ID;
			IF (@cnt = 1) 
			BEGIN
				SELECT @cnt = count(1) FROM USER_AFFILIATION WHERE COMPANY_ID=@COMPANY_ID AND USER_ID=@USER_ID;
				IF (@cnt <= 0) 
				BEGIN
					INSERT INTO USER_AFFILIATION (USER_AFFILIATION_ID, USER_ID, COMPANY_ID) VALUES(@attrId, @USER_ID, @COMPANY_ID);
					SET @attrId = (@attrId+1);
				END;
			END;
		END;

		IF (@DEPT_CD IS NOT NULL) 
		BEGIN
			SELECT @cnt = count(1) FROM COMPANY WHERE COMPANY_ID=@DEPT_CD;
			IF (@cnt = 1) 
			BEGIN
				SELECT @cnt = count(1) FROM USER_AFFILIATION WHERE COMPANY_ID=@DEPT_CD AND USER_ID=@USER_ID;
				IF (@cnt <= 0) 
				BEGIN
					INSERT INTO USER_AFFILIATION (USER_AFFILIATION_ID, USER_ID, COMPANY_ID) VALUES(@attrId, @USER_ID, @DEPT_CD);
					SET @attrId = (@attrId+1);
				END;
			END; 
		END;
				
		IF (@DEPT_NAME IS NOT NULL) 
		BEGIN
			SELECT @cnt = count(1) FROM COMPANY WHERE COMPANY_ID=@DEPT_NAME;
			IF (@cnt = 1)
			BEGIN 
				SELECT @cnt = count(1) FROM USER_AFFILIATION WHERE COMPANY_ID=@DEPT_NAME AND USER_ID=@USER_ID;
				IF (@cnt <= 0) 
				BEGIN
					INSERT INTO USER_AFFILIATION (USER_AFFILIATION_ID, USER_ID, COMPANY_ID) VALUES(@attrId, @USER_ID, @DEPT_NAME);
					SET @attrId = (@attrId + 1);
				END;
			END;
		END;
	END;
	FETCH NEXT FROM c1 INTO @USER_ID, @COMPANY_ID, @DEPT_CD, @DEPT_NAME;
  END;
END;
GO

ALTER TABLE USERS DROP CONSTRAINT FK_USERS_DEPARTMENT;
ALTER TABLE USERS DROP CONSTRAINT FK_USERS_DIVISION;
ALTER TABLE USERS DROP CONSTRAINT FK_USERS_COMPANY;
DROP INDEX FK_USERS_DEPARTMENT ON USERS;
DROP INDEX FK_USERS_DIVISION ON USERS;
DROP INDEX FK_USERS_COMPANY ON USERS;

ALTER TABLE USERS DROP COLUMN DEPT_CD;
ALTER TABLE USERS DROP COLUMN DEPT_NAME;
ALTER TABLE USERS DROP COLUMN DIVISION;
ALTER TABLE USERS DROP COLUMN COMPANY_ID;







/* 7 */
ALTER TABLE USERS ADD DATE_IT_POLICY_APPROVED DATETIME NULL;


CREATE  TABLE IT_POLICY (
  IT_POLICY_ID NVARCHAR(32) NOT NULL,
  APPROVE_TYPE NVARCHAR(64) DEFAULT 'Once' NOT NULL,
  ACTIVE CHAR(1) DEFAULT 'N' NOT NULL,
  CREATE_DATE DATETIME DEFAULT GETDATE(),
  UPDATE_DATE DATETIME DEFAULT GETDATE(),
  CREATED_BY NVARCHAR(32),
  UPDATED_BY NVARCHAR(32),
  POLICY_CONTENT NVARCHAR(MAX),
  CONFIRMATION NVARCHAR(255),
  PRIMARY KEY (IT_POLICY_ID)
);


/* 8 */
ALTER TABLE ORGANIZATION_TYPE ADD CONSTRAINT UNIQUE_ORG_TYPE UNIQUE(NAME);

/* 9  */
GO
ALTER TABLE BATCH_CONFIG ADD T_ENABLED CHAR(1) NOT NULL CONSTRAINT CONSTRAIN_T_ENEBLED DEFAULT 'N';
GO
UPDATE BATCH_CONFIG SET T_ENABLED='Y' WHERE ENABLED = 1;
GO

Declare @v_constraintname NVARCHAR(max)

set @v_constraintname ='ALTER TABLE BATCH_CONFIG DROP CONSTRAINT '

set @v_constraintname = @v_constraintname + (select c_obj.name as CONSTRAINT_NAME
from sysobjects c_obj
join syscomments com on c_obj.id = com.id
join sysobjects t_obj on c_obj.parent_obj = t_obj.id 
join sysconstraints con on c_obj.id = con.constid
join syscolumns col on t_obj.id = col.id
and con.colid = col.colid
where
c_obj.uid = user_id()
and c_obj.xtype = 'D'
and t_obj.name='BATCH_CONFIG' and col.name='ENABLED')

exec(@v_constraintname)

GO


ALTER TABLE BATCH_CONFIG DROP COLUMN ENABLED;
GO
EXEC sp_rename 'BATCH_CONFIG.T_ENABLED', 'ENABLED', 'COLUMN';
GO
ALTER TABLE BATCH_CONFIG ALTER COLUMN ENABLED CHAR(1) NOT NULL; 

Declare @v_constraintname NVARCHAR(max)

set @v_constraintname ='ALTER TABLE BATCH_CONFIG DROP CONSTRAINT '

set @v_constraintname = @v_constraintname + (select c_obj.name as CONSTRAINT_NAME
from sysobjects c_obj
join syscomments com on c_obj.id = com.id
join sysobjects t_obj on c_obj.parent_obj = t_obj.id 
join sysconstraints con on c_obj.id = con.constid
join syscolumns col on t_obj.id = col.id
and con.colid = col.colid
where
c_obj.uid = user_id()
and c_obj.xtype = 'D'
and t_obj.name='BATCH_CONFIG' and col.name='ENABLED')

exec(@v_constraintname)

GO

ALTER TABLE BATCH_CONFIG ADD DEFAULT 'N' FOR ENABLED;


/* 10 */

ALTER TABLE BATCH_CONFIG ADD LAST_MODIFIED_DATETIME DATETIME DEFAULT GETDATE() NULL;
ALTER TABLE BATCH_CONFIG ADD RUN_ON DATETIME DEFAULT GETDATE() NULL;
ALTER TABLE BATCH_CONFIG ADD CRON_EXPRESSION NVARCHAR(100) NULL;
ALTER TABLE BATCH_CONFIG ADD SPRING_BEAN NVARCHAR(100) NULL;
ALTER TABLE BATCH_CONFIG ADD SPRING_BEAN_METHOD NVARCHAR(100) NULL;

GO
UPDATE BATCH_CONFIG SET CRON_EXPRESSION='0 0/1 * 1/1 * ? *' WHERE FREQUENCY_UNIT_OF_MEASURE='MINUTE';
UPDATE BATCH_CONFIG SET CRON_EXPRESSION='0 0 0 1/1 * ? *' WHERE FREQUENCY_UNIT_OF_MEASURE='NIGHTLY';

UPDATE BATCH_CONFIG SET CRON_EXPRESSION='0 0/1 * * * ?' WHERE CRON_EXPRESSION='0 0/1 * 1/1 * ? *';
UPDATE BATCH_CONFIG SET CRON_EXPRESSION='0 0 0 1/1 * ?' WHERE CRON_EXPRESSION='0 0 0 1/1 * ? *';

ALTER TABLE BATCH_CONFIG DROP COLUMN FREQUENCY;
ALTER TABLE BATCH_CONFIG DROP COLUMN FREQUENCY_UNIT_OF_MEASURE;

GO
CREATE TRIGGER ON_BATCH_TASK_INSERT 
ON BATCH_CONFIG 
AFTER INSERT
	AS 
	BEGIN
	UPDATE BATCH_CONFIG
    SET LAST_MODIFIED_DATETIME = GETDATE()
    FROM inserted, BATCH_CONFIG
	WHERE inserted.TASK_ID = BATCH_CONFIG.TASK_ID
	END;	
GO
	
	
CREATE TRIGGER ON_BATCH_TASK_UPDATE 
ON BATCH_CONFIG 
AFTER UPDATE
	AS 
	BEGIN
	UPDATE BATCH_CONFIG
    SET LAST_MODIFIED_DATETIME = GETDATE()
    FROM inserted, BATCH_CONFIG
	WHERE inserted.TASK_ID = BATCH_CONFIG.TASK_ID
	END;	
GO


/* 11 */


CREATE TABLE UI_TEMPLATE_TYPE (
	TEMPLATE_TYPE_ID NVARCHAR(32) NOT NULL,
	NAME NVARCHAR(100) NOT NULL,
	DESCRIPTION NVARCHAR(200),
	PRIMARY KEY(TEMPLATE_TYPE_ID)
);

INSERT INTO UI_TEMPLATE_TYPE (TEMPLATE_TYPE_ID, NAME, DESCRIPTION) VALUES('USER_TEMPLATE', 'User Page Tempate', 'Template for SelfService User-centric pages');
ALTER TABLE METADATA_ELEMENT_PAGE_TEMPLATE ADD TEMPLATE_TYPE_ID NVARCHAR(32) NULL;
GO
UPDATE METADATA_ELEMENT_PAGE_TEMPLATE SET TEMPLATE_TYPE_ID='USER_TEMPLATE';
ALTER TABLE METADATA_ELEMENT_PAGE_TEMPLATE ALTER COLUMN TEMPLATE_TYPE_ID NVARCHAR(32) NOT NULL;
ALTER TABLE METADATA_ELEMENT_PAGE_TEMPLATE ADD CONSTRAINT TEMPLATE_TYPE_FK FOREIGN KEY(TEMPLATE_TYPE_ID) REFERENCES UI_TEMPLATE_TYPE(TEMPLATE_TYPE_ID);
CREATE INDEX TEMPLATE_TYPE_FK ON METADATA_ELEMENT_PAGE_TEMPLATE(TEMPLATE_TYPE_ID);

CREATE TABLE UI_TEMPLATE_FIELDS (
	UI_FIELD_ID NVARCHAR(32) NOT NULL,
	NAME NVARCHAR(100) NOT NULL,
	DESCRIPTION NVARCHAR(200),
	TEMPLATE_TYPE_ID NVARCHAR(32) NOT NULL,
	IS_REQUIRED CHAR(1) DEFAULT 'N' NOT NULL,
	PRIMARY KEY(UI_FIELD_ID),
  CONSTRAINT TEMPLATE_TYPE_UI_TEMPL_FK FOREIGN KEY (TEMPLATE_TYPE_ID) REFERENCES UI_TEMPLATE_TYPE(TEMPLATE_TYPE_ID)
);

CREATE INDEX TEMPLATE_TYPE_UI_TEMPL_FK ON UI_TEMPLATE_FIELDS(TEMPLATE_TYPE_ID);


INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID, IS_REQUIRED) VALUES('USER_FIRST_NAME', 'First Name', 'USER_TEMPLATE', 'Y');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID, IS_REQUIRED) VALUES('USER_LAST_NAME', 'Last Name', 'USER_TEMPLATE', 'Y');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_MIDDLE_INIT', 'Middle Initial', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_MAIDEN_NAME', 'Maiden Name', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_NICKNAME', 'User NickName', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_DOB', 'Date of Birth', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_TITLE', 'User Title', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_GENDER', 'Gender', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_EMPLOYEE_ID', 'Employee ID', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_EMPLOYEE_TYPE', 'Employee Type', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_LOCATION_CODE', 'Location Code', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_LOCATION_NAME', 'Location Name', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_SELECT_SUPERVISOR', 'Select Supervisor', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_CLASSICIATION', 'User Classification', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_PREFIX', 'Prefix', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_STATUS', 'User Status', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_SECONDARY_STATUS', 'Account Status', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_SUFFIX', 'User Suffix', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_ALTERNATE_CONTACT', 'Alternate Contact', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_MAILCODE', 'Mail Code', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_COST_CENTER', 'Cost Center', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_JOB_CODE', 'Job Code', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_USER_TYPE', 'User Type', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_OBJECT_TYPE', 'User Type', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_START_DATE', 'Start Date', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_END_DATE', 'End Date', 'USER_TEMPLATE');

INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_ADDRESS_REQUIRED', 'User is required to input at least one address', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_PHONES_REQUIRED', 'User is required to input at least one phone number', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_PHONES_CREATABLE', 'User can input phone numbers', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_ADDRESSES_CREATABLE', 'User can input addresses', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_SHOW_ROLES', 'User can select a Role', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_SHOW_GROUPS', 'User can select a Group', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID) VALUES('USER_SHOW_ORGANIZATIONS', 'User can define his organizational structure', 'USER_TEMPLATE');
INSERT INTO UI_TEMPLATE_FIELDS (UI_FIELD_ID, NAME, TEMPLATE_TYPE_ID, IS_REQUIRED) VALUES('USER_CREATE_LOGIN', 'User can create a custom login', 'USER_TEMPLATE', 'Y');


CREATE TABLE UI_FIELD_TEMPLATE_XREF (
	UI_FIELD_ID NVARCHAR(32) NOT NULL,
	TEMPLATE_ID NVARCHAR(32) NOT NULL,
	IS_REQUIRED CHAR(1) DEFAULT 'N' NOT NULL,
	IS_EDITABLE CHAR(1) DEFAULT 'Y' NOT NULL,
	DISPLAY_ORDER NUMERIC(3) NOT NULL,
	CONSTRAINT TEMPLATE_XREF_UI_FIELD_FK FOREIGN KEY (UI_FIELD_ID) REFERENCES UI_TEMPLATE_FIELDS(UI_FIELD_ID),
	CONSTRAINT TEMPLATE_XREF_TEMPLATE_FK FOREIGN KEY (TEMPLATE_ID) REFERENCES METADATA_ELEMENT_PAGE_TEMPLATE(ID),
	CONSTRAINT TEMPLATE_XREF_UNIQUE UNIQUE(TEMPLATE_ID, UI_FIELD_ID)
);


CREATE INDEX TEMPLATE_XREF_UI_FIELD_FK ON UI_FIELD_TEMPLATE_XREF(UI_FIELD_ID);
CREATE INDEX TEMPLATE_XREF_TEMPLATE_FK ON UI_FIELD_TEMPLATE_XREF(TEMPLATE_ID);


/* 12 */
GO
DECLARE
    @cnt NUMERIC,
    @attrId NUMERIC;
    SET @cnt = 0;
    SET @attrId = 1;
DECLARE @USER_ID NVARCHAR(32), @MANAGER_ID NVARCHAR(32);
DECLARE c2 CURSOR FOR SELECT USER_ID, MANAGER_ID FROM USERS;
BEGIN
  OPEN c2;
  FETCH NEXT FROM c2 INTO @USER_ID, @MANAGER_ID;
  WHILE @@FETCH_STATUS = 0
  BEGIN
      IF (@MANAGER_ID IS NOT NULL) 
      BEGIN
        SELECT @cnt = count(1) FROM ORG_STRUCTURE WHERE SUPERVISOR_ID=@MANAGER_ID AND STAFF_ID=@USER_ID;
        IF (@cnt <= 0)
        BEGIN
          INSERT INTO ORG_STRUCTURE (ORG_STRUCTURE_ID, SUPERVISOR_ID, STAFF_ID) VALUES (@attrId, @MANAGER_ID, @USER_ID);
          SET @attrId = (@attrId + 1);
        END;
      END;
      FETCH NEXT FROM c2 INTO @USER_ID, @MANAGER_ID;
  END;
END;
GO

ALTER TABLE USERS DROP COLUMN MANAGER_ID;

/* 13 */

DELETE FROM METADATA_TYPE WHERE GROUPING IN ('EMAIL', 'PHONE', 'ADDRESS');  

INSERT INTO METADATA_TYPE(TYPE_ID,DESCRIPTION,ACTIVE,GROUPING) VALUES ('WORK_EMAIL','Work Email','Y','EMAIL');
INSERT INTO METADATA_TYPE(TYPE_ID,DESCRIPTION,ACTIVE,GROUPING) VALUES ('PRIMARY_EMAIL','Primary Email','Y','EMAIL');
INSERT INTO METADATA_TYPE(TYPE_ID,DESCRIPTION,ACTIVE,GROUPING) VALUES ('HOME_EMAIL','Home Email','Y','EMAIL');

INSERT INTO METADATA_TYPE(TYPE_ID,DESCRIPTION,ACTIVE,GROUPING) VALUES('OFFICE_PHONE','Office phone','Y','PHONE');
INSERT INTO METADATA_TYPE(TYPE_ID,DESCRIPTION,ACTIVE,GROUPING) VALUES('CELL_PHONE','Cell phone','Y','PHONE');
INSERT INTO METADATA_TYPE(TYPE_ID,DESCRIPTION,ACTIVE,GROUPING) VALUES('HOME_PHONE','Home phone','Y','PHONE');


INSERT INTO METADATA_TYPE(TYPE_ID,DESCRIPTION,ACTIVE,GROUPING) VALUES('OFFICE_ADDRESS','Office Address','Y','ADDRESS');
INSERT INTO METADATA_TYPE(TYPE_ID,DESCRIPTION,ACTIVE,GROUPING) VALUES('HOME_ADDRESS','Home Address','Y','ADDRESS');

ALTER TABLE EMAIL_ADDRESS ADD TYPE_ID NVARCHAR(32);
ALTER TABLE ADDRESS ADD TYPE_ID NVARCHAR(32);
ALTER TABLE PHONE ADD TYPE_ID NVARCHAR(32);
GO
UPDATE EMAIL_ADDRESS SET TYPE_ID='WORK_EMAIL';
UPDATE ADDRESS SET TYPE_ID='OFFICE_ADDRESS';
UPDATE PHONE SET TYPE_ID='OFFICE_PHONE';


ALTER TABLE EMAIL_ADDRESS ALTER COLUMN TYPE_ID NVARCHAR(32) NOT NULL;
ALTER TABLE ADDRESS ALTER COLUMN  TYPE_ID NVARCHAR(32) NOT NULL;
ALTER TABLE PHONE ALTER COLUMN  TYPE_ID NVARCHAR(32) NOT NULL;


ALTER TABLE EMAIL_ADDRESS ADD CONSTRAINT EMAIL_ADDRESS_TYPE_FK FOREIGN KEY (TYPE_ID) REFERENCES METADATA_TYPE(TYPE_ID); 
ALTER TABLE ADDRESS ADD CONSTRAINT ADDRESS_TYPE_FK FOREIGN KEY (TYPE_ID) REFERENCES METADATA_TYPE(TYPE_ID);
ALTER TABLE PHONE ADD CONSTRAINT PHONE_TYPE_FK FOREIGN KEY (TYPE_ID) REFERENCES METADATA_TYPE(TYPE_ID);


CREATE INDEX EMAIL_ADDRESS_TYPE_FK ON EMAIL_ADDRESS(TYPE_ID);
CREATE INDEX ADDRESS_TYPE_FK ON ADDRESS(TYPE_ID);
CREATE INDEX PHONE_TYPE_FK ON PHONE(TYPE_ID);



/* 14 */

DROP TABLE REPORT_INFO;

CREATE TABLE REPORT_PARAMETER_TYPE (
  RCPT_ID NVARCHAR(100) DEFAULT NULL,
  TYPE_NAME NVARCHAR(100) DEFAULT NULL,
  TYPE_DESCRIPTION NVARCHAR(100) DEFAULT NULL
);

CREATE TABLE REPORT_INFO (
  REPORT_INFO_ID NVARCHAR(32) NOT NULL,
  REPORT_NAME NVARCHAR(64) NOT NULL,
  DATASOURCE_FILE_PATH NVARCHAR(255) NOT NULL,
  REPORT_FILE_PATH NVARCHAR(255) DEFAULT NULL,
  PRIMARY KEY (REPORT_INFO_ID)
);

ALTER TABLE REPORT_INFO ADD CONSTRAINT REPORT_NAME UNIQUE(REPORT_NAME);

CREATE TABLE  REPORT_CRITERIA_PARAMETER(
  RCP_ID NVARCHAR(32) NOT NULL,
  REPORT_INFO_ID NVARCHAR(32) NOT NULL,
  PARAM_NAME NVARCHAR(64) NOT NULL,
  PARAM_VALUE NVARCHAR(64) DEFAULT NULL,
  RCPT_ID NVARCHAR(100) DEFAULT NULL,
  PRIMARY KEY (RCP_ID)
);


CREATE TABLE REPORT_SUBSCRIPTIONS (
  REPORT_SUB_ID NVARCHAR(32) NOT NULL,
  REPORT_INFO_ID NVARCHAR(45) DEFAULT NULL,
  REPORT_NAME NVARCHAR(64) NOT NULL,
  DELIVERY_METHOD NVARCHAR(45) DEFAULT NULL,
  DELIVERY_FORMAT NVARCHAR(45) DEFAULT NULL,
  DELIVERY_AUDIENCE NVARCHAR(45) DEFAULT NULL,
  STATUS NVARCHAR(45) DEFAULT NULL,
  USERID NVARCHAR(45) DEFAULT NULL,
  PRIMARY KEY (REPORT_SUB_ID)
);


CREATE TABLE  REPORT_SUB_CRITERIA_PARAM (
  RSCP_ID NVARCHAR(45) NOT NULL,
  RCP_ID NVARCHAR(32) DEFAULT NULL,
  REPORT_SUB_ID NVARCHAR(32) DEFAULT NULL,
  PARAM_NAME NVARCHAR(64) DEFAULT NULL,
  PARAM_VALUE NVARCHAR(64) DEFAULT NULL,
  PRIMARY KEY (RSCP_ID)
);

ALTER TABLE RECONCILIATION_CONFIG ADD MANUAL_RECONCILIATION_FLAG CHAR(1) DEFAULT 'N' NOT NULL;
