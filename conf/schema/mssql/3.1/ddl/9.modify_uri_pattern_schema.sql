use openiam;


IF EXISTS (SELECT * FROM information_schema.columns WHERE table_CATALOG='openiam' AND table_name = 'AUTH_LEVEL' AND column_name = 'AUTH_LEVEL_DIG') 
BEGIN
	DROP INDEX UNIQUE_AUTH_LEVEL_LEVEL ON AUTH_LEVEL
	ALTER TABLE AUTH_LEVEL DROP COLUMN AUTH_LEVEL_DIG;
END;

IF EXISTS (SELECT * FROM information_schema.columns WHERE table_CATALOG='openiam' AND table_name = 'AUTH_LEVEL' AND column_name = 'REQUIRES_AUTHENTICATION') 
	ALTER TABLE AUTH_LEVEL DROP COLUMN REQUIRES_AUTHENTICATION;


IF EXISTS (SELECT * FROM information_schema.columns WHERE table_CATALOG='openiam' AND table_name = 'AUTH_LEVEL_GROUPING') 
	DELETE FROM AUTH_LEVEL_GROUPING;



ALTER TABLE AUTH_LEVEL ADD REQUIRES_AUTHENTICATION CHAR(1) DEFAULT 'Y';
GO
UPDATE AUTH_LEVEL SET REQUIRES_AUTHENTICATION='Y';
ALTER TABLE AUTH_LEVEL ALTER COLUMN REQUIRES_AUTHENTICATION CHAR(1) NOT NULL;

Declare @v_constraintname NVARCHAR(max)
set @v_constraintname ='ALTER TABLE AUTH_LEVEL DROP CONSTRAINT '
set @v_constraintname = @v_constraintname + (select c_obj.name as CONSTRAINT_NAME
from sysobjects c_obj
join syscomments com on c_obj.id = com.id
join sysobjects t_obj on c_obj.parent_obj = t_obj.id 
join sysconstraints con on c_obj.id = con.constid
join syscolumns col on t_obj.id = col.id
and con.colid = col.colid
where
c_obj.uid = user_id()
and c_obj.xtype = 'D'
and t_obj.name='AUTH_LEVEL' and col.name='REQUIRES_AUTHENTICATION')
exec(@v_constraintname)
	
ALTER TABLE AUTH_LEVEL ADD DEFAULT 'Y' FOR REQUIRES_AUTHENTICATION;

DELETE FROM AUTH_LEVEL WHERE AUTH_LEVEL_ID IN('None', 'NONE');
INSERT INTO AUTH_LEVEL (AUTH_LEVEL_ID, AUTH_LEVEL_NAME, REQUIRES_AUTHENTICATION) VALUES('NONE', 'No Authentication Required', 'N');

IF OBJECT_ID('CP_AUTH_LEVEL_GRP_XREF', 'U') IS NOT NULL
	DROP TABLE CP_AUTH_LEVEL_GRP_XREF;

IF OBJECT_ID('URI_AUTH_LEVEL_GRP_XREF', 'U') IS NOT NULL
	DROP TABLE URI_AUTH_LEVEL_GRP_XREF;
	
IF OBJECT_ID('AUTH_LEVEL_ATTRIBUTE', 'U') IS NOT NULL
	DROP TABLE AUTH_LEVEL_ATTRIBUTE;

IF OBJECT_ID('AUTH_LEVEL_GROUPING', 'U') IS NOT NULL
	DROP TABLE AUTH_LEVEL_GROUPING;

CREATE TABLE AUTH_LEVEL_GROUPING (
	AUTH_LEVEL_GROUPING_ID NVARCHAR(32) NOT NULL,
	AUTH_LEVEL_ID NVARCHAR(32) NOT NULL,
	NAME NVARCHAR(100) NOT NULL,
	PRIMARY KEY(AUTH_LEVEL_GROUPING_ID),
	CONSTRAINT AUTH_LEVEL_GROUPING_FK FOREIGN KEY (AUTH_LEVEL_ID) REFERENCES AUTH_LEVEL(AUTH_LEVEL_ID)
);

CREATE TABLE AUTH_LEVEL_ATTRIBUTE(
	AUTH_LEVEL_ATTRIBUTE_ID NVARCHAR(32) NOT NULL,
	AUTH_LEVEL_GROUPING_ID NVARCHAR(32) NOT NULL,
	TYPE_ID NVARCHAR(32) NOT NULL,
	NAME NVARCHAR(100) NOT NULL,
	VALUE VARBINARY(MAX) NOT NULL,
	PRIMARY KEY(AUTH_LEVEL_ATTRIBUTE_ID),
	CONSTRAINT AUTH_LEVEL_ATTR_GRP_FK FOREIGN KEY (AUTH_LEVEL_GROUPING_ID) REFERENCES AUTH_LEVEL_GROUPING(AUTH_LEVEL_GROUPING_ID),
	CONSTRAINT AUTH_LEVEL_ATTR_TYPE_FK FOREIGN KEY (TYPE_ID) REFERENCES METADATA_TYPE(TYPE_ID)
);

CREATE TABLE URI_AUTH_LEVEL_GRP_XREF(
	URI_PATTERN_ID NVARCHAR(32) NOT NULL,
	AUTH_LEVEL_GROUPING_ID NVARCHAR(32) NOT NULL,
	EXEC_ORDER NUMERIC(3) NOT NULL,
	CONSTRAINT URI_AUTH_LEVEL_GRP_FK FOREIGN KEY (AUTH_LEVEL_GROUPING_ID) REFERENCES AUTH_LEVEL_GROUPING(AUTH_LEVEL_GROUPING_ID),
	CONSTRAINT URI_AUTH_LEVEL_URI_FK FOREIGN KEY (URI_PATTERN_ID) REFERENCES URI_PATTERN(URI_PATTERN_ID),
	CONSTRAINT UNIQUE_URI_AUTH_GROUP UNIQUE(URI_PATTERN_ID, AUTH_LEVEL_GROUPING_ID, EXEC_ORDER)
);

CREATE TABLE CP_AUTH_LEVEL_GRP_XREF(
	CONTENT_PROVIDER_ID NVARCHAR(32) NOT NULL,
	AUTH_LEVEL_GROUPING_ID NVARCHAR(32) NOT NULL,
	EXEC_ORDER NUMERIC(3) NOT NULL,
	CONSTRAINT CP_AUTH_LEVEL_GRP_FK FOREIGN KEY (AUTH_LEVEL_GROUPING_ID) REFERENCES AUTH_LEVEL_GROUPING(AUTH_LEVEL_GROUPING_ID),
	CONSTRAINT CP_AUTH_LEVEL_CP_FK FOREIGN KEY (CONTENT_PROVIDER_ID) REFERENCES CONTENT_PROVIDER(CONTENT_PROVIDER_ID),
	CONSTRAINT UNIQUE_CP_AUTH_GROUP UNIQUE(CONTENT_PROVIDER_ID, AUTH_LEVEL_GROUPING_ID, EXEC_ORDER)
);

INSERT INTO AUTH_LEVEL_GROUPING (AUTH_LEVEL_GROUPING_ID, AUTH_LEVEL_ID, NAME) VALUES('NONE', 'NONE', 'None');
INSERT INTO AUTH_LEVEL_GROUPING (AUTH_LEVEL_GROUPING_ID, AUTH_LEVEL_ID, NAME) VALUES('PASSWORD_AUTH', 'PASSWORD_AUTH', 'Password Authentication');
INSERT INTO AUTH_LEVEL_GROUPING (AUTH_LEVEL_GROUPING_ID, AUTH_LEVEL_ID, NAME) VALUES('CERT_AUTH', 'CERT_AUTH', 'Certificate Authentication');